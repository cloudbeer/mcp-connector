[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-connector"
version = "0.1.0"
description = "MCP 服务端集合管理工具"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["mcp", "fastapi", "ai", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web 框架
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    # 数据库
    "asyncpg>=0.29.0",
    # 工具库
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    # MCP 和 AI Agent
    "mcp>=1.11.0",
    "strands-agents[anthropic,openai]>=1.0.0",
    # 基础依赖
    "typing-extensions>=4.0.0",
    "strands-agents-tools>=0.2.1",
]

[tool.uv]
cache-dir = "/tmp/uv_cache"

[project.optional-dependencies]
dev = [
    # 测试
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # for testing FastAPI
    
    # 代码质量
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    
    # 开发工具
    "pre-commit>=3.5.0",
]

monitoring = [
    # 日志和监控（稍后规划）
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/mcp-connector"
Repository = "https://github.com/yourusername/mcp-connector"
Issues = "https://github.com/yourusername/mcp-connector/issues"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project.scripts]
mcp-connector = "app.main:main"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "strands.*",
    "mcp.*",
    "pgvector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
