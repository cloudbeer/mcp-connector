"""
Session manager for MCP clients and agents.
"""
import time
import logging
import uuid
from typing import Dict, Any, List, Tuple, Optional
from strands import Agent

from app.config import settings

logger = logging.getLogger(__name__)


class SessionManager:
    """
    管理与会话 ID 关联的 clients 和 agent 对象。
    允许在多次请求之间复用这些资源，减少初始化开销。
    """
    
    def __init__(self, expiry_time: int = 30 * 60):
        """
        初始化会话管理器。
        
        Args:
            expiry_time: 会话过期时间（秒），默认 30 分钟
        """
        self.sessions: Dict[str, Dict[str, Any]] = {}  # session_id -> session_data
        self.session_expiry: Dict[str, float] = {}  # session_id -> expiry_time
        self.expiry_time = expiry_time
        logger.info(f"Session manager initialized with expiry time: {expiry_time} seconds")
    
    def create_session(
        self, 
        session_id: Optional[str], 
        assistant_id: int, 
        clients: List[Any], 
        tools: List[Any]
    ) -> Tuple[str, Agent]:
        """
        创建新会话。
        
        Args:
            session_id: 会话 ID，如果为 None 则自动生成
            assistant_id: 助手 ID
            clients: MCP 客户端列表
            tools: 工具列表
            
        Returns:
            Tuple[str, Agent]: 会话 ID 和 Agent 实例
        """
        # 如果没有提供会话 ID，则生成一个
        if session_id is None:
            session_id = str(uuid.uuid4())
        
        # 如果会话已存在，先关闭它
        if session_id in self.sessions:
            self.close_session(session_id)
        
        logger.info(f"Creating new session {session_id} for assistant {assistant_id}")
        
        # 创建 Agent with model based on environment variables
        model = self._create_model_from_env()
        
        # Log model configuration details
        if model:
            model_type = model.__class__.__name__
            model_id = getattr(model, 'model_id', 'unknown')
            logger.info(f"Creating Agent with model provider: {model_type}, model ID: {model_id}")
            
            # Log additional model parameters if available
            params = {}
            if hasattr(model, 'params'):
                params = model.params
            elif hasattr(model, 'temperature'):
                params['temperature'] = model.temperature
            if params:
                logger.info(f"Model parameters: {params}")
        else:
            logger.warning("No model provider configured, using default model")
        
        # 创建 Agent
        agent = Agent(tools=tools, model=model)
        
        # 存储会话数据
        self.sessions[session_id] = {
            'assistant_id': assistant_id,
            'clients': clients,
            'agent': agent,
            'tools': tools,
            'created_at': time.time(),
            'last_used_at': time.time()
        }
        
        # 设置过期时间
        self.session_expiry[session_id] = time.time() + self.expiry_time
        
        return session_id, agent
    
    def get_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        """
        获取会话，如果存在则更新过期时间。
        
        Args:
            session_id: 会话 ID
            
        Returns:
            Optional[Dict[str, Any]]: 会话数据，如果不存在则返回 None
        """
        if session_id in self.sessions:
            # 更新过期时间和最后使用时间
            self.session_expiry[session_id] = time.time() + self.expiry_time
            self.sessions[session_id]['last_used_at'] = time.time()
            logger.debug(f"Session {session_id} accessed, expiry updated")
            return self.sessions[session_id]
        
        logger.debug(f"Session {session_id} not found")
        return None
    
    def close_session(self, session_id: str) -> bool:
        """
        关闭会话，释放资源。
        
        Args:
            session_id: 会话 ID
            
        Returns:
            bool: 是否成功关闭
        """
        if session_id in self.sessions:
            session = self.sessions[session_id]
            logger.info(f"Closing session {session_id} for assistant {session['assistant_id']}")
            
            # 删除会话数据
            del self.sessions[session_id]
            del self.session_expiry[session_id]
            
            return True
        
        logger.debug(f"Attempted to close non-existent session {session_id}")
        return False
    
    def cleanup_expired_sessions(self) -> int:
        """
        清理过期会话。
        
        Returns:
            int: 清理的会话数量
        """
        current_time = time.time()
        expired_sessions = [
            session_id for session_id, expiry_time in self.session_expiry.items()
            if current_time > expiry_time
        ]
        
        for session_id in expired_sessions:
            logger.info(f"Cleaning up expired session {session_id}")
            self.close_session(session_id)
        
        return len(expired_sessions)
    
    def get_session_count(self) -> int:
        """
        获取当前会话数量。
        
        Returns:
            int: 会话数量
        """
        return len(self.sessions)
    
    def get_session_info(self, session_id: str) -> Optional[Dict[str, Any]]:
        """
        获取会话信息（不包含实际的客户端和代理对象）。
        
        Args:
            session_id: 会话 ID
            
        Returns:
            Optional[Dict[str, Any]]: 会话信息，如果不存在则返回 None
        """
        if session_id in self.sessions:
            session = self.sessions[session_id]
            return {
                'session_id': session_id,
                'assistant_id': session['assistant_id'],
                'created_at': session['created_at'],
                'last_used_at': session['last_used_at'],
                'expires_at': self.session_expiry[session_id],
                'client_count': len(session['clients']),
                'tool_count': len(session['tools'])
            }
        return None
    
    def list_sessions(self) -> List[Dict[str, Any]]:
        """
        列出所有会话的基本信息。
        
        Returns:
            List[Dict[str, Any]]: 会话信息列表
        """
        return [
            self.get_session_info(session_id)
            for session_id in self.sessions
        ]
    
    def clear_all_sessions(self) -> int:
        """
        清除所有会话。
        
        Returns:
            int: 清除的会话数量
        """
        session_ids = list(self.sessions.keys())
        for session_id in session_ids:
            self.close_session(session_id)
        
        return len(session_ids)
    
    def _create_model_from_env(self):
        """Create a model instance based on environment variables."""
        # Get model provider from settings
        model_provider = settings.model_provider.lower()
        model_name = settings.model_name
        
        try:
            if model_provider == "openai":
                # OpenAI model configuration
                from strands.models.openai import OpenAIModel
                
                api_key = settings.openai_api_key
                base_url = settings.openai_base_url
                
                if not api_key:
                    logger.warning("OPENAI_API_KEY not set, using default model")
                    return None
                
                logger.info(f"Creating OpenAI model: {model_name}")
                return OpenAIModel(
                    client_args={
                        "api_key": api_key,
                        "base_url": base_url,
                    },
                    model_id=model_name,
                    params={
                        "temperature": 0.7,  # Default temperature
                        "max_tokens": 1000,  # Default max tokens
                    }
                )
                
            elif model_provider == "anthropic":
                # Anthropic model configuration
                from strands.models.anthropic import AnthropicModel
                
                api_key = settings.anthropic_api_key
                
                if not api_key:
                    logger.warning("ANTHROPIC_API_KEY not set, using default model")
                    return None
                
                logger.info(f"Creating Anthropic model: {model_name}")
                return AnthropicModel(
                    client_args={
                        "api_key": api_key,
                    },
                    model_id=model_name,
                    params={
                        "temperature": 0.7,  # Default temperature
                        "max_tokens": 1000,  # Default max tokens
                    }
                )
                
            elif model_provider == "bedrock":
                # AWS Bedrock model configuration
                from strands.models import BedrockModel
                
                aws_access_key = settings.aws_access_key_id
                aws_secret_key = settings.aws_secret_access_key
                aws_region = settings.aws_region
                
                logger.info(f"Creating AWS Bedrock model: {model_name}")
                
                # Create client args based on available credentials
                client_args = {}
                if aws_region:
                    client_args["region_name"] = aws_region
                
                # Only add credentials if explicitly provided
                if aws_access_key and aws_secret_key:
                    client_args["aws_access_key_id"] = aws_access_key
                    client_args["aws_secret_access_key"] = aws_secret_key
                    logger.info("Using provided AWS credentials")
                else:
                    logger.info("Using default AWS credential provider chain")
                
                return BedrockModel(
                    model_id=model_name,
                    temperature=0.7,  # Default temperature
                    top_p=0.8,  # Default top_p
                    client_args=client_args
                )
                
            else:
                logger.warning(f"Unsupported model provider: {model_provider}, using default model")
                return None
                
        except ImportError as e:
            logger.warning(f"Failed to import model for provider {model_provider}: {e}")
            logger.warning("Make sure to install the required packages:")
            if model_provider == "openai":
                logger.warning("pip install 'strands-agents[openai]'")
            elif model_provider == "anthropic":
                logger.warning("pip install 'strands-agents[anthropic]'")
            elif model_provider == "bedrock":
                logger.warning("pip install 'strands-agents[bedrock]'")
            return None
            
        except Exception as e:
            logger.error(f"Error creating model for provider {model_provider}: {e}")
            return None


# 全局会话管理器实例
session_manager = SessionManager()